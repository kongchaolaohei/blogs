"use strict";(self.webpackChunkvuepress_test=self.webpackChunkvuepress_test||[]).push([[958],{9370:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-18409305",path:"/solution/vue/vue%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",title:"相对复杂的权限解决方案",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"需求:",slug:"需求",children:[]},{level:2,title:"解决核心功能需要用到的工具",slug:"解决核心功能需要用到的工具",children:[]},{level:2,title:"解决方案拆解",slug:"解决方案拆解",children:[{level:3,title:"登陆状态记录",slug:"登陆状态记录",children:[]},{level:3,title:"动态路由处理",slug:"动态路由处理",children:[]},{level:3,title:"项目中各种行为的处理",slug:"项目中各种行为的处理",children:[]}]},{level:2,title:"我的总结",slug:"我的总结",children:[{level:3,title:"慎用router.beforeEach中的next()方法",slug:"慎用router-beforeeach中的next-方法",children:[]},{level:3,title:"关于用于指定路由唯一标识属性的选择",slug:"关于用于指定路由唯一标识属性的选择",children:[]},{level:3,title:"关于用户正常退出时,路由权限重置的方式",slug:"关于用户正常退出时-路由权限重置的方式",children:[]}]}],filePathRelative:"solution/vue/vue权限解决方案.md",git:{updatedTime:1631937686e3,contributors:[{name:"kongchaolaohei",email:"kongchaolaohei@xxx.com",commits:1}]}}},7896:(n,e,a)=>{a.r(e),a.d(e,{default:()=>_});var s=a(6252);const t=(0,s.uE)('<h1 id="相对复杂的权限解决方案" tabindex="-1"><a class="header-anchor" href="#相对复杂的权限解决方案" aria-hidden="true">#</a> 相对复杂的权限解决方案</h1><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求:</h2><ul><li>利用现有的<strong>upm</strong>系统实现权限系统</li><li>支持多角色</li><li>权限的控制需要精确到功能性按钮级别</li><li>其他如无权限页等的基本操作</li></ul><h2 id="解决核心功能需要用到的工具" tabindex="-1"><a class="header-anchor" href="#解决核心功能需要用到的工具" aria-hidden="true">#</a> 解决核心功能需要用到的工具</h2>',4),o={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("vue-router"),c={href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("vuex"),l={href:"http://www.axios-js.com/",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("axios"),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Uk)("localStorage"),h=(0,s.uE)('<h2 id="解决方案拆解" tabindex="-1"><a class="header-anchor" href="#解决方案拆解" aria-hidden="true">#</a> 解决方案拆解</h2><p>涉及到网站权限的实现那么,在Vue这个框架下,第一个想到的就是<code>vue-router</code>,以及<code>vue-router</code>中的<code>router.beforEach</code>,以我现在浅薄的经验来看,这两样东西基本上是绕不过去的必经之路;那么下面我将尝试拆解一下具体的解决思路.</p><h3 id="登陆状态记录" tabindex="-1"><a class="header-anchor" href="#登陆状态记录" aria-hidden="true">#</a> 登陆状态记录</h3><p>比较简单的功能, 通过<strong>upm</strong>登录接口获取<code>token</code>存入<code>localStorage</code>,再通过<code>axios</code>封装的接口统一携带登陆信息.根据处理方式的不同可以使用不同的方式,我们目前采用的是将登录信息在<code>header</code>中携带.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 两种存取方式随便选一个就是</span>\n<span class="token comment">// 第一种 直接更改默全局配置</span>\nservice<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;xxx-token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;xxx-token&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span>\n<span class="token comment">// 第二种 在拦截器中配置 如果有其他特殊要求可以更灵活一些</span>\nservice<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;xxx-token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;xxx-token&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">undefined</span>\n    <span class="token keyword">return</span> config\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="动态路由处理" tabindex="-1"><a class="header-anchor" href="#动态路由处理" aria-hidden="true">#</a> 动态路由处理</h3><p>我总共使用过以下两种方式,不同的方式遇到的问题也是不一样的,(曾今也有不用动态路由做权限的黑历史,这种就不算了)</p><h4 id="按需增加路由" tabindex="-1"><a class="header-anchor" href="#按需增加路由" aria-hidden="true">#</a> 按需增加路由</h4><p>这个实现思路就是,在config文件中预置<strong>公用路由</strong>和<strong>全量的权限路由</strong>,调用<strong>upm</strong>角色权限接口中的权限列表和<strong>全量的权限路由</strong>进行过滤,之后和公用路由合并产生一个可用的路由列表, 这样无权限的路由就不会存在于生成的权限路由之中.(在执行该方法时主要利用的是<code>router.addRoute</code>这个API),</p><div class="custom-container warning"><p class="custom-container-title">遇到的问题</p><ol><li>使用这个方法时遇到了404和无权限访问路由的区分问题, 因为使用这个方法动态添加路由时, 没有权限的路由会被过滤掉, 根本不会添加到路由表里, 这样该状态和404状态就会混淆, 所以不得不再次引入<strong>全量权限路由</strong> 进行对比之后在判断, 该去404页面或是无权限页面.</li><li>如果设计的页面权限无法覆盖到每一个路由的话, 那么需要根据具体的情况和规律来过滤路由,这个需要在设计路由和权限的关系之前需要考虑好</li></ol></div><h4 id="更改重定向" tabindex="-1"><a class="header-anchor" href="#更改重定向" aria-hidden="true">#</a> 更改重定向</h4><p>这个的实现思路的第一部,同样是将<strong>公共路由</strong>和<strong>全量的权限路由</strong>分别单独准备好,但是在过滤权限的时候<strong>不是将其删除,而是设置路由中的<code>redirect</code>属性</strong>来实现权限的控制(这样可以有效的分开404和其他状态);亲测优于第一种.</p><div class="custom-container warning"><p class="custom-container-title">遇到的问题</p><ol><li>遇到的问题如上述第二条一样,在设计之初要想好怎么组织权限和路由的关系</li></ol></div><h3 id="项目中各种行为的处理" tabindex="-1"><a class="header-anchor" href="#项目中各种行为的处理" aria-hidden="true">#</a> 项目中各种行为的处理</h3><p>这个的话就得根据项目需求的各种奇怪要求来对症下药了,我这里总结一下解决的途径.</p><p>对于一些单纯用路由配置本身解决不了的问题,我目前的解决方案就是**<code>router.beforeEach</code><strong>和</strong><code>vuex</code>**的配合完成,有些情况还会需要<code>Axios</code>来配合</p><h2 id="我的总结" tabindex="-1"><a class="header-anchor" href="#我的总结" aria-hidden="true">#</a> 我的总结</h2><h3 id="慎用router-beforeeach中的next-方法" tabindex="-1"><a class="header-anchor" href="#慎用router-beforeeach中的next-方法" aria-hidden="true">#</a> 慎用router.beforeEach中的next()方法</h3><p>在处理一些需要使用路由守卫<code>router.beforeEach</code>解决的问题时,必不可少的就是<code>next()</code>的使用了,要注意调用<code>next()</code>之后的去向,在写这一部分的代码是,进场会进入死循环导致栈溢出.</p><h3 id="关于用于指定路由唯一标识属性的选择" tabindex="-1"><a class="header-anchor" href="#关于用于指定路由唯一标识属性的选择" aria-hidden="true">#</a> 关于用于指定路由唯一标识属性的选择</h3><p>这个由于当初经验不足, 是通过路由中的<code>path</code>属性作为key来过滤路由,给自己添加了许多的麻烦(最好不要用path来当做key使用);后来使用<code>meta</code>属性自定义key来过滤路由,这个我觉得没有什么太大的问题,更灵活自由一些;还有就是使用<code>name</code>属性作为key这个也是非常不错的选择,因为在<code>vue-router</code>的文档中说明,每人一个<code>route</code>的<code>name</code>属性都是全局唯一的.</p><h3 id="关于用户正常退出时-路由权限重置的方式" tabindex="-1"><a class="header-anchor" href="#关于用户正常退出时-路由权限重置的方式" aria-hidden="true">#</a> 关于用户正常退出时,路由权限重置的方式</h3><p>在用户正常退出之后,更换账号登录之后,需要重置一次权限路由.</p><p>根据<code>vue-router 3.x</code> 的文档中有关于 <code>router.addRoute</code>API的描述,当添加<code>name</code>相同的<code>route</code>会覆盖原来的<code>route</code>;这当时给我提供了思路,但是实测发现这个覆盖并不生效**(目前我还不知道为什么不生效,可能是我操作不对的原因?)**;</p><p>于是我尝试了另一种方法</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span>router <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matcher <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">createNewRouter</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matcher\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',26),k=(0,s.Uk)("使用"),g=(0,s._)("code",null,"matcher",-1),b=(0,s.Uk)("方法来重置路由后,再重新添加一遍权限路由来实现,但是这个方法总觉得是歪门邪道,"),m={href:"https://github.com/vuejs/vue-router/issues/1234",target:"_blank",rel:"noopener noreferrer"},f=(0,s.Uk)("github-issue"),v=(0,s.Uk)(" 即使参考了这个issue我还是有一些疑惑,希望大佬有一些好的指点吧"),x=(0,s._)("p",null,[(0,s.Uk)("不过听同事在"),(0,s._)("code",null,"vue 3.x"),(0,s.Uk)("中使用的 "),(0,s._)("code",null,"vue-router 4.x"),(0,s.Uk)(" 中的 "),(0,s._)("code",null,"removeRoute()"),(0,s.Uk)("和"),(0,s._)("code",null,"addRoute()"),(0,s.Uk)(" 配合起来可以解决这个问题, 不过我还没有抽时间亲手试一试.")],-1),_={render:function(n,e){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",o,[r,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",c,[p,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",l,[u,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",i,[d,(0,s.Wm)(a)])])]),h,(0,s._)("p",null,[k,g,b,(0,s._)("a",m,[f,(0,s.Wm)(a)]),v]),x],64)}}}}]);