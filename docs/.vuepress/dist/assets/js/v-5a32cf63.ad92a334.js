"use strict";(self.webpackChunkvuepress_test=self.webpackChunkvuepress_test||[]).push([[440],{6261:(e,a,r)=>{r.r(a),r.d(a,{data:()=>t});const t={key:"v-5a32cf63",path:"/solution/other/%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E9%80%9A%E8%AE%AF%E9%97%AE%E9%A2%98.html",title:"不同页面通讯问题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"iframe通信",slug:"iframe通信",children:[{level:3,title:"非跨域情况下的交互方式",slug:"非跨域情况下的交互方式",children:[]}]}],filePathRelative:"solution/other/不同页面通讯问题.md",git:{updatedTime:1631937686e3,contributors:[{name:"kongchaolaohei",email:"kongchaolaohei@xxx.com",commits:1}]}}},2072:(e,a,r)=>{r.r(a),r.d(a,{default:()=>i});const t=(0,r(6252).uE)('<h1 id="不同页面通讯问题" tabindex="-1"><a class="header-anchor" href="#不同页面通讯问题" aria-hidden="true">#</a> 不同页面通讯问题</h1><p>平时开发可能会遇到两个不同的页面之间相互通信的情况. 目前我遇到过的暂时只有<code>iframe</code>这一类的问题,其他的方法并没有实际的在项目中使用过.</p><h2 id="iframe通信" tabindex="-1"><a class="header-anchor" href="#iframe通信" aria-hidden="true">#</a> iframe通信</h2><h3 id="非跨域情况下的交互方式" tabindex="-1"><a class="header-anchor" href="#非跨域情况下的交互方式" aria-hidden="true">#</a> 非跨域情况下的交互方式</h3><p>在<code>iframe</code>中使用的是非跨域资源的时候,双方是可以互相访问到对方的<code>window</code>对象的. 那么第一种通讯方式就很明显了.</p>',5),i={render:function(e,a){return t}}}}]);